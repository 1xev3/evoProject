version: "2.0"

volumes:
  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data
  mongo-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./mongo/data
  minio-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./minio/data
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-data
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service

services:
  postgresql:
    image: postgres:latest
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 3
  mongo:
    image: mongo:latest
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: tech-support
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
  minio:
    restart: always
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
  rabbitmq:
    image: rabbitmq:3.13.0-rc.1-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3


  ticket-service:
    build:
      context: ../services/ticket-service
      dockerfile: ./Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      PG_DSN: ${PG_DSN}
      RABBITMQ_DSN: ${RABBITMQ_DSN}
      
  product-service:
    build:
      context: ../services/product-service
      dockerfile: ./Dockerfile
    ports:
      - "5010:5010"
    depends_on:
      - mongo
      - minio
    environment:
      MONGO_DSN: ${MONGO_DSN}
      MINIO_DSN: ${MINIO_DSN}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}

  user-service:
    build:
      context: ../services/user-service
      dockerfile: ./Dockerfile
    ports:
      - "5020:5020"
    volumes:
      - user-service-data:/mnt/
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PG_DSN: ${PG_ASYNC_DSN}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}

  telegram-notify-service:
    build:
      context: ../services/telegram-notify-service
      dockerfile: ./Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_DSN: ${RABBITMQ_DSN}
      TELEGRAM_CHAT_IDS: ${TELEGRAM_CHAT_IDS}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}

  review-service:
    build:
      context: ../services/review-service
      dockerfile: ./Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PG_DSN: ${PG_ASYNC_DSN}
      RABBITMQ_DSN: ${RABBITMQ_DSN}

  policy-enforcement-service:
    build:
      context: ../services/policy-enforcement-service
      dockerfile: ./Dockerfile
    ports:
      - "5100:5100"
    volumes:
      - policy-enforcement-data:/mnt/
    depends_on:
      - postgresql
      - user-service
      - review-service
      - telegram-notify-service
      - product-service
      - ticket-service
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}

  testing:
    build:
      context: ../testing
      dockerfile: ./Dockerfile
    depends_on:
      - policy-enforcement-service
    environment:
      PG_DSN: ${PG_DSN}