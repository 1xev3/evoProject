model: |
    [request_definition]
    r = sub, obj, act
    
    [policy_definition]
    p = sub_rule, obj, act
    
    [policy_effect]
    e = some(where (p.eft == allow))
    
    [matchers]
    m = eval(p.sub_rule) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)
services:
    - name: product-service
      entrypoint: http://localhost:5010/
      inject_token_in_swagger: True
    - name: ticket-service
      entrypoint: http://localhost:5001/
      inject_token_in_swagger: True
    - name: review-service
      entrypoint: http://review-service:5030/
      inject_token_in_swagger: True
    - name: user-service
      entrypoint: http://localhost:5020/
      inject_token_in_swagger: True
policies:
    #PRODUCT SERVICE
    - service: product-service
      rule: r.sub.group_id == 1 #only admin
      resource: /products*
      methods: (POST)|(PUT)|(DELETE)
    - service: product-service
      resource: /products*
      methods: GET
      white_list: true

    #TICKET SERVICE
    - service: ticket-service
      rule: r.sub.group_id > 0
      resource: /tickets
      methods: GET
    - service: ticket-service
      rule: r.sub.group_id == 1
      resource: /tickets
      methods: POST
    - service: ticket-service
      rule: r.sub.group_id == 1
      resource: /tickets/*
      methods: (GET)|(POST)|(PUT)|(DELETE)

    #USER SERVICE
    - service: user-service
      rule: r.sub.group_id == 1 #only admin
      resource: /groups*
      methods: (GET)|(POST)|(PUT)|(DELETE)
    - service: user-service
      resource: /auth/*
      methods: POST
      white_list: true
    - service: user-service
      resource: /users/*
      methods: (GET)|(POST)|(PUT)|(DELETE)
      rule: r.sub.group_id > 0

    #REVIEW SERVICE
    - service: review-service
      rule: r.sub.group_id > 0
      resource: /reviews*
      methods: (GET)|(POST)|(PUT)|(DELETE)